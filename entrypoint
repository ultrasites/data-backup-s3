#!/bin/bash

. /functions.sh

if [[ -n "$BACKUP_DEBUG" ]]; then
  set -x
fi

file_env "BACKUP_FREQ" "1440"
file_env "BACKUP_BEGIN" "+0"
file_env "BACKUP_DEBUG"
file_env "BACKUP_DATA" "/home/backupuser/data"

file_env "AWS_ENDPOINT_URL"
file_env "AWS_ENDPOINT_OPT"
file_env "AWS_CLI_OPTS"
file_env "AWS_CLI_AWS_CP_OPTS"
file_env "AWS_ACCESS_KEY_ID"
file_env "AWS_SECRET_ACCESS_KEY"
file_env "AWS_DEFAULT_REGION"

file_env "S3_TARGET" "/backup"

file_env "TMP_PATH" "/tmp"

file_env "COMPRESSION" "gzip"

if [[ -n "$BACKUP_DEBUG" ]]; then
  set -x
fi

# set compress commands
COMPRESS=
case $COMPRESSION in
  gzip)
    COMPRESS="gzip"
    EXTENSION="tgz"
    ;;
  bzip2)
    COMPRESS="bzip2"
    EXTENSION="tbz2"
    ;;
  *)
    echo "Unknown compression requested: $COMPRESSION" >&2
    exit 1
esac


# temporary BACKUP dir
TMPDIR="${TMP_PATH}/backups"

# this is global, so has to be set outside
declare -A uri

# wait for the next time to start a backup
# for debugging
echo Starting Data-Backup at $(date)
last_run=0
current_time=$(date +"%s")
freq_time=$(($BACKUP_FREQ*60))
# get the begin time on our date
# REMEMBER: we are using the basic date package in alpine
# could be a delay in minutes or an absolute time of day
if [ -n "$BACKUP_CRON" ]; then
  # calculate how long until the next cron instance is met
  waittime=$(wait_for_cron "$BACKUP_CRON" "$current_time" $last_run)
elif [[ $BACKUP_BEGIN =~ ^\+(.*)$ ]]; then
  waittime=$(( ${BASH_REMATCH[1]} * 60 ))
  target_time=$(($current_time + $waittime))
else
  today=$(date +"%Y-%m-%d")
  target_time=$(date --date="${today} ${BACKUP_BEGIN}" +"%s")

  if [[ "$target_time" < "$current_time" ]]; then
    target_time=$(($target_time + 24*60*60))
  fi

  waittime=$(($target_time - $current_time))
fi

# If RUN_ONCE is set, don't wait
if [ -z "${RUN_ONCE}" ]; then
  sleep $waittime
  last_run=$(date +"%s")
fi

# enter the loop
exit_code=0
while true; do
  # make sure the directory exists
  mkdir -p $TMPDIR
  do_backup
  [ $? -ne 0 ] && exit_code=1
  save_backup_to_s3 ${S3_TARGET}
  [ $? -ne 0 ] && exit_code=1
  
  # remove lingering file
  /bin/rm ${TMPDIR}/${SOURCE}

  # wait, unless RUN_ONCE is set
  current_time=$(date +"%s")
  if [ -n "${RUN_ONCE}" ]; then
    exit $exit_code
  elif [ -n "${BACKUP_CRON}" ]; then
    waittime=$(wait_for_cron "${BACKUP_CRON}" "$current_time" $last_run)
  else
    current_time=$(date +"%s")
    # Calculate how long the previous backup took
    backup_time=$(($current_time - $target_time))
    # Calculate how many times the frequency time was passed during the previous backup.
    freq_time_count=$(($backup_time / $freq_time))
    # Increment the count with one because we want to wait at least the frequency time once.
    freq_time_count_to_add=$(($freq_time_count + 1))
    # Calculate the extra time to add to the previous target time
    extra_time=$(($freq_time_count_to_add*$freq_time))
    # Calculate the new target time needed for the next calculation
    target_time=$(($target_time + $extra_time))
    # Calculate the wait time
    waittime=$(($target_time - $current_time))
  fi
  sleep $waittime
  last_run=$(date +"%s")
done
